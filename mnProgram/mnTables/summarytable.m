function summarytable(controlanalysis,testanalysis)

warning('off', 'MATLAB:divideByZero');

if nargin == 1

    currentdirectory = cd;
    cd(controlanalysis.datapathname);

    if exist('tables','dir')==7
        cd('tables');
    else
        mkdir('tables');
        cd('tables');
    end

 	
	position{1,1} = sprintf('"Summary Table -- %s"',controlanalysis.inputfilename);
	position{2,1} = '"Measure"';
	position{3,1} = '"Soma Diameter"';
	position{4,1} = '"Number Primary Dendrites"';
	position{5,1} = '"PD Proximal Diameter"';
	position{6,1} = '"Total Dendritic"';
	position{7,1} = '"     Length"';
	position{8,1} = '"     Surface Area"';
	position{9,1} = '"     Volume"';
	position{10,1} = '"Segment Numbers"';
	position{11,1} = '"     Combined"';
	position{12,1} = '"     Intermediate"';
	position{13,1} = '"     Terminal"';
	position{14,1} = '"Branch Order"';
	position{15,1} = '"     Combined"';
	position{16,1} = '"	    Intermediate"';
	position{17,1} = '"	    Terminal"';
	position{18,1} = '"Degree"';
	position{19,1} = '"	    Combined"';
	position{20,1} = '"	    Intermediate"';
	position{21,1} = '"	    Terminal"';
	position{22,1} = '"Taper Rate (by segment)"';
	position{23,1} = '"	    Combined"';
	position{24,1} = '"	    Intermediate"';
	position{25,1} = '"	    Terminal"';
	position{26,1} = '"Segment Avg. Diameter"';
	position{27,1} = '"	    Combined"';
	position{28,1} = '"	    Intermediate"';
	position{29,1} = '"	    Terminal"';
	position{30,1} = '"Branch Length"';
	position{31,1} = '"	    Combined"';
	position{32,1} = '"	    Intermediate"';
	position{33,1} = '"	    Terminal"';
	position{34,1} = '"Branch Surface Area"';
	position{35,1} = '"	    Combined"';
	position{36,1} = '"	    Intermediate"';
	position{37,1} = '"	    Terminal"';
	position{38,1} = '"Branch Volume"';
	position{39,1} = '"	    Combined"';
	position{40,1} = '"	    Intermediate"';
	position{41,1} = '"	    Terminal"';
	position{42,1} = '"Rall (1.5) Ratio"';
	position{43,1} = '"Rall (2.0) Ratio"';
	position{44,1} = '"Daughter Ratio"';
	position{45,1} = '"Termination Path Length"';
	position{46,1} = '"Bifurcation Asymmetry"';
	position{47,1} = '"Surface Asymmetry"';
	
	position{2,2} = '"Mean"';
	position{3,2} = mean([controlanalysis.soma.diameter.values]);
	position{4,2} = mean([controlanalysis.dendrite.numbertrunks.values]);
	position{5,2} = mean([controlanalysis.dendrite.trunk.proximaldiameter.values]);
	%position{6,2} = 'Total Dendritic';
	position{7,2} = mean([controlanalysis.dendrite.totallength.values]);
	position{8,2} = mean([controlanalysis.dendrite.totalsurfacearea.values]);
	position{9,2} = mean([controlanalysis.dendrite.totalvolume.values]);
	%position{10,2} = 'Segment Numbers';
	position{11,2} = mean([controlanalysis.dendrite.numbersegments.values]);
	position{12,2} = mean([controlanalysis.dendrite.numberbifurcations.values]);
	position{13,2} = mean([controlanalysis.dendrite.numberterminations.values]);
	%position{14,2} = 'Branch Order';
	position{15,2} = mean([controlanalysis.dendrite.cable.branchorder.values]);
	position{16,2} = mean([controlanalysis.dendrite.bifurcation.cable.branchorder.values]);
	position{17,2} = mean([controlanalysis.dendrite.termination.cable.branchorder.values]);
	%position{18,2} = 'Degree';
	position{19,2} = mean([controlanalysis.dendrite.cable.degree.values]);
	position{20,2} = mean([controlanalysis.dendrite.bifurcation.cable.degree.values]);
	position{21,2} = mean([controlanalysis.dendrite.termination.cable.degree.values]);
	%position{22,2} = 'Taper Rate';
	position{23,2} = 1000*mean([controlanalysis.dendrite.cable.taperrate.values]);
	position{24,2} = 1000*mean([controlanalysis.dendrite.bifurcation.cable.taperrate.values]);
	position{25,2} = 1000*mean([controlanalysis.dendrite.termination.cable.taperrate.values]);
	%position{26,2} = 'Diameter';
	position{27,2} = mean([controlanalysis.dendrite.cable.cylindricaldiameter.values]); %sum( [controlanalysis.diameter.diameter].* ( [controlanalysis.diameter.length.total] / sum([controlanalysis.dendrite.cable.length.values]) ) );
	position{28,2} = mean([controlanalysis.dendrite.bifurcation.cable.cylindricaldiameter.values]); %sum( [controlanalysis.dendrite.bifurcation.diameter.diameter].* ( [controlanalysis.dendrite.bifurcation.diameter.length.total] / sum([controlanalysis.dendrite.bifurcation.cable.length.values]) ) );
	position{29,2} = mean([controlanalysis.dendrite.termination.cable.cylindricaldiameter.values]); %sum( [controlanalysis.dendrite.termination.diameter.diameter].* ( [controlanalysis.dendrite.termination.diameter.length.total] / sum([controlanalysis.dendrite.termination.cable.length.values]) ) );
	%position{30,2} = 'Branch Length';
	position{31,2} = mean([controlanalysis.dendrite.cable.length.values]);
	position{32,2} = mean([controlanalysis.dendrite.bifurcation.cable.length.values]);
	position{33,2} = mean([controlanalysis.dendrite.termination.cable.length.values]);
	%position{34,2} = 'Branch Surface Area';
	position{35,2} = mean([controlanalysis.dendrite.cable.surfacearea.values]);
	position{36,2} = mean([controlanalysis.dendrite.bifurcation.cable.surfacearea.values]);
	position{37,2} = mean([controlanalysis.dendrite.termination.cable.surfacearea.values]);
	%position{38,2} = 'Branch Volume';
	position{39,2} = mean([controlanalysis.dendrite.cable.volume.values]);
	position{40,2} = mean([controlanalysis.dendrite.bifurcation.cable.volume.values]);
	position{41,2} = mean([controlanalysis.dendrite.termination.cable.volume.values]);
	position{42,2} = mean([controlanalysis.dendrite.cable.rallratio.values]);
	position{43,2} = mean([controlanalysis.dendrite.cable.rallratio2.values]);
	position{44,2} = mean([controlanalysis.dendrite.cable.daughterratio.values]);
	position{45,2} = mean([controlanalysis.dendrite.termination.cable.distalpathlength.values]);
	position{46,2} = mean([controlanalysis.dendrite.bifurcation.cable.partitionasymmetry.values]);
	position{47,2} = mean([controlanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values]);
	
	
	
	
	position{2,3} = '"StDv"';
	position{3,3} = std([controlanalysis.soma.diameter.values]);
	position{4,3} = std([controlanalysis.dendrite.numbertrunks.values]);
	position{5,3} = std([controlanalysis.dendrite.trunk.proximaldiameter.values]);
	%position{6,3} = 'Total Dendritic';
	position{7,3} = std([controlanalysis.dendrite.totallength.values]);
	position{8,3} = std([controlanalysis.dendrite.totalsurfacearea.values]);
	position{9,3} = std([controlanalysis.dendrite.totalvolume.values]);
	%position{10,3} = 'Segment Numbers';
	position{11,3} = std([controlanalysis.dendrite.numbersegments.values]);
	position{12,3} = std([controlanalysis.dendrite.numberbifurcations.values]);
	position{13,3} = std([controlanalysis.dendrite.numberterminations.values]);
	%position{14,3} = 'Branch Order';
	position{15,3} = std([controlanalysis.dendrite.cable.branchorder.values]);
	position{16,3} = std([controlanalysis.dendrite.bifurcation.cable.branchorder.values]);
	position{17,3} = std([controlanalysis.dendrite.termination.cable.branchorder.values]);
	%position{18,3} = 'Degree';
	position{19,3} = std([controlanalysis.dendrite.cable.degree.values]);
	position{20,3} = std([controlanalysis.dendrite.bifurcation.cable.degree.values]);
	position{21,3} = std([controlanalysis.dendrite.termination.cable.degree.values]);
	%position{22,3} = 'Taper Rate';
	position{23,3} = 1000*std([controlanalysis.dendrite.cable.taperrate.values]);
	position{24,3} = 1000*std([controlanalysis.dendrite.bifurcation.cable.taperrate.values]);
	position{25,3} = 1000*std([controlanalysis.dendrite.termination.cable.taperrate.values]);
	%position{26,3} = 'Diameter';
	position{27,3} = std([controlanalysis.dendrite.cable.cylindricaldiameter.values]); %(sum((([controlanalysis.diameter.diameter] - position{27,2}).^2).*([controlanalysis.diameter.length.total]/sum([controlanalysis.dendrite.cable.length.values]))))^0.5;
	position{28,3} = std([controlanalysis.dendrite.bifurcation.cable.cylindricaldiameter.values]); %(sum((([controlanalysis.dendrite.bifurcation.diameter.diameter] - position{28,2}).^2).*([controlanalysis.dendrite.bifurcation.diameter.length.total]/sum([controlanalysis.dendrite.bifurcation.cable.length.values]))))^0.5;
	position{29,3} = std([controlanalysis.dendrite.termination.cable.cylindricaldiameter.values]); %(sum((([controlanalysis.dendrite.termination.diameter.diameter] - position{29,2}).^2).*([controlanalysis.dendrite.termination.diameter.length.total]/sum([controlanalysis.dendrite.termination.cable.length.values]))))^0.5;
	%position{30,3} = 'Branch Length';
	position{31,3} = std([controlanalysis.dendrite.cable.length.values]);
	position{32,3} = std([controlanalysis.dendrite.bifurcation.cable.length.values]);
	position{33,3} = std([controlanalysis.dendrite.termination.cable.length.values]);
	%position{34,3} = 'Branch Surface Area';
	position{35,3} = std([controlanalysis.dendrite.cable.surfacearea.values]);
	position{36,3} = std([controlanalysis.dendrite.bifurcation.cable.surfacearea.values]);
	position{37,3} = std([controlanalysis.dendrite.termination.cable.surfacearea.values]);
	%position{38,3} = 'Branch Volume';
	position{39,3} = std([controlanalysis.dendrite.cable.volume.values]);
	position{40,3} = std([controlanalysis.dendrite.bifurcation.cable.volume.values]);
	position{41,3} = std([controlanalysis.dendrite.termination.cable.volume.values]);
	position{42,3} = std([controlanalysis.dendrite.cable.rallratio.values]);
	position{43,3} = std([controlanalysis.dendrite.cable.rallratio2.values]);
	position{44,3} = std([controlanalysis.dendrite.cable.daughterratio.values]);
	position{45,3} = std([controlanalysis.dendrite.termination.cable.distalpathlength.values]);
	position{46,3} = std([controlanalysis.dendrite.bifurcation.cable.partitionasymmetry.values]);
	position{47,3} = std([controlanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values]);
	
	
	
	position{2,4} = '"Skew"';
	position{3,4} = skewness([controlanalysis.soma.diameter.values]);
	position{4,4} = skewness([controlanalysis.dendrite.numbertrunks.values]);
	position{5,4} = skewness([controlanalysis.dendrite.trunk.proximaldiameter.values]);
	%position{6,4} = 'Total Dendritic';
	position{7,4} = skewness([controlanalysis.dendrite.totallength.values]);
	position{8,4} = skewness([controlanalysis.dendrite.totalsurfacearea.values]);
	position{9,4} = skewness([controlanalysis.dendrite.totalvolume.values]);
	%position{10,4} = 'Segment Numbers';
	position{11,4} = skewness([controlanalysis.dendrite.numbersegments.values]);
	position{12,4} = skewness([controlanalysis.dendrite.numberbifurcations.values]);
	position{13,4} = skewness([controlanalysis.dendrite.numberterminations.values]);
	%position{14,4} = 'Branch Order';
	position{15,4} = skewness([controlanalysis.dendrite.cable.branchorder.values]);
	position{16,4} = skewness([controlanalysis.dendrite.bifurcation.cable.branchorder.values]);
	position{17,4} = skewness([controlanalysis.dendrite.termination.cable.branchorder.values]);
	%position{18,4} = 'Degree';
	position{19,4} = skewness([controlanalysis.dendrite.cable.degree.values]);
	position{20,4} = skewness([controlanalysis.dendrite.bifurcation.cable.degree.values]);
	position{21,4} = skewness([controlanalysis.dendrite.termination.cable.degree.values]);
	%position{22,4} = 'Taper Rate';
	position{23,4} = skewness([controlanalysis.dendrite.cable.taperrate.values]);
	position{24,4} = skewness([controlanalysis.dendrite.bifurcation.cable.taperrate.values]);
	position{25,4} = skewness([controlanalysis.dendrite.termination.cable.taperrate.values]);
	%position{26,4} = 'Diameter';
	position{27,4} = skewness([controlanalysis.dendrite.cable.cylindricaldiameter.values]); %(1/(position{27,3}^3))*sum((([controlanalysis.diameter.diameter] - position{27,2}).^3).*([controlanalysis.diameter.length.total]/sum([controlanalysis.dendrite.cable.length.values])));
	position{28,4} = skewness([controlanalysis.dendrite.bifurcation.cable.cylindricaldiameter.values]); %(1/(position{27,3}^3))*sum((([controlanalysis.dendrite.bifurcation.diameter.diameter] - position{28,2}).^3).*([controlanalysis.dendrite.bifurcation.diameter.length.total]/sum([controlanalysis.dendrite.bifurcation.cable.length.values])));
	position{29,4} = skewness([controlanalysis.dendrite.termination.cable.cylindricaldiameter.values]); %(1/(position{27,3}^3))*sum((([controlanalysis.dendrite.termination.diameter.diameter] - position{29,2}).^3).*([controlanalysis.dendrite.termination.diameter.length.total]/sum([controlanalysis.dendrite.termination.cable.length.values])));
	%position{30,4} = 'Branch Length';
	position{31,4} = skewness([controlanalysis.dendrite.cable.length.values]);
	position{32,4} = skewness([controlanalysis.dendrite.bifurcation.cable.length.values]);
	position{33,4} = skewness([controlanalysis.dendrite.termination.cable.length.values]);
	%position{34,4} = 'Branch Surface Area';
	position{35,4} = skewness([controlanalysis.dendrite.cable.surfacearea.values]);
	position{36,4} = skewness([controlanalysis.dendrite.bifurcation.cable.surfacearea.values]);
	position{37,4} = skewness([controlanalysis.dendrite.termination.cable.surfacearea.values]);
	%position{38,4} = 'Branch Volume';
	position{39,4} = skewness([controlanalysis.dendrite.cable.volume.values]);
	position{40,4} = skewness([controlanalysis.dendrite.bifurcation.cable.volume.values]);
	position{41,4} = skewness([controlanalysis.dendrite.termination.cable.volume.values]);
	position{42,4} = skewness([controlanalysis.dendrite.cable.rallratio.values]);
	position{43,4} = skewness([controlanalysis.dendrite.cable.rallratio2.values]);
	position{44,4} = skewness([controlanalysis.dendrite.cable.daughterratio.values]);
	position{45,4} = skewness([controlanalysis.dendrite.termination.cable.distalpathlength.values]);
	position{46,4} = skewness([controlanalysis.dendrite.bifurcation.cable.partitionasymmetry.values]);
	position{47,4} = skewness([controlanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values]);
	
	
	
	
	position{2,5} = '"Kurt"';
	position{3,5} = kurtosis([controlanalysis.soma.diameter.values]);
	position{4,5} = kurtosis([controlanalysis.dendrite.numbertrunks.values]);
	position{5,5} = kurtosis([controlanalysis.dendrite.trunk.proximaldiameter.values]);
	%position{6,5} = 'Total Dendritic';
	position{7,5} = kurtosis([controlanalysis.dendrite.totallength.values]);
	position{8,5} = kurtosis([controlanalysis.dendrite.totalsurfacearea.values]);
	position{9,5} = kurtosis([controlanalysis.dendrite.totalvolume.values]);
	%position{10,5} = 'Segment Numbers';
	position{11,5} = kurtosis([controlanalysis.dendrite.numbersegments.values]);
	position{12,5} = kurtosis([controlanalysis.dendrite.numberbifurcations.values]);
	position{13,5} = kurtosis([controlanalysis.dendrite.numberterminations.values]);
	%position{14,5} = 'Branch Order';
	position{15,5} = kurtosis([controlanalysis.dendrite.cable.branchorder.values]);
	position{16,5} = kurtosis([controlanalysis.dendrite.bifurcation.cable.branchorder.values]);
	position{17,5} = kurtosis([controlanalysis.dendrite.termination.cable.branchorder.values]);
	%position{18,5} = 'Degree';
	position{19,5} = kurtosis([controlanalysis.dendrite.cable.degree.values]);
	position{20,5} = kurtosis([controlanalysis.dendrite.bifurcation.cable.degree.values]);
	position{21,5} = kurtosis([controlanalysis.dendrite.termination.cable.degree.values]);
	%position{22,5} = 'Taper Rate';
	position{23,5} = kurtosis([controlanalysis.dendrite.cable.taperrate.values]);
	position{24,5} = kurtosis([controlanalysis.dendrite.bifurcation.cable.taperrate.values]);
	position{25,5} = kurtosis([controlanalysis.dendrite.termination.cable.taperrate.values]);
	%position{26,5} = 'Diameter';
	position{27,5} = kurtosis([controlanalysis.dendrite.cable.cylindricaldiameter.values]); %(1/(position{27,3}^4))*sum((([controlanalysis.diameter.diameter] - position{27,2}).^4).*([controlanalysis.diameter.length.total]/sum([controlanalysis.dendrite.cable.length.values])));
	position{28,5} = kurtosis([controlanalysis.dendrite.bifurcation.cable.cylindricaldiameter.values]); %(1/(position{27,3}^4))*sum((([controlanalysis.dendrite.bifurcation.diameter.diameter] - position{28,2}).^4).*([controlanalysis.dendrite.bifurcation.diameter.length.total]/sum([controlanalysis.dendrite.bifurcation.cable.length.values])));
	position{29,5} = kurtosis([controlanalysis.dendrite.termination.cable.cylindricaldiameter.values]); %(1/(position{27,3}^4))*sum((([controlanalysis.dendrite.termination.diameter.diameter] - position{29,2}).^4).*([controlanalysis.dendrite.termination.diameter.length.total]/sum([controlanalysis.dendrite.termination.cable.length.values])));	
	%position{30,5} = 'Branch Length';
	position{31,5} = kurtosis([controlanalysis.dendrite.cable.length.values]);
	position{32,5} = kurtosis([controlanalysis.dendrite.bifurcation.cable.length.values]);
	position{33,5} = kurtosis([controlanalysis.dendrite.termination.cable.length.values]);
	%position{34,5} = 'Branch Surface Area';
	position{35,5} = kurtosis([controlanalysis.dendrite.cable.surfacearea.values]);
	position{36,5} = kurtosis([controlanalysis.dendrite.bifurcation.cable.surfacearea.values]);
	position{37,5} = kurtosis([controlanalysis.dendrite.termination.cable.surfacearea.values]);
	%position{38,5} = 'Branch Volume';
	position{39,5} = kurtosis([controlanalysis.dendrite.cable.volume.values]);
	position{40,5} = kurtosis([controlanalysis.dendrite.bifurcation.cable.volume.values]);
	position{41,5} = kurtosis([controlanalysis.dendrite.termination.cable.volume.values]);
	position{42,5} = kurtosis([controlanalysis.dendrite.cable.rallratio.values]);
	position{43,5} = kurtosis([controlanalysis.dendrite.cable.rallratio2.values]);
	position{44,5} = kurtosis([controlanalysis.dendrite.cable.daughterratio.values]);
	position{45,5} = kurtosis([controlanalysis.dendrite.termination.cable.distalpathlength.values]);
	position{46,5} = kurtosis([controlanalysis.dendrite.bifurcation.cable.partitionasymmetry.values]);
	position{47,5} = kurtosis([controlanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values]);
	
	
	
	
	
	position{2,6} = '"Min"';
	position{3,6} = min([controlanalysis.soma.diameter.values]);
	position{4,6} = min([controlanalysis.dendrite.numbertrunks.values]);
	position{5,6} = min([controlanalysis.dendrite.trunk.proximaldiameter.values]);
	%position{6,6} = 'Total Dendritic';
	position{7,6} = min([controlanalysis.dendrite.totallength.values]);
	position{8,6} = min([controlanalysis.dendrite.totalsurfacearea.values]);
	position{9,6} = min([controlanalysis.dendrite.totalvolume.values]);
	%position{10,6} = 'Segment Numbers';
	position{11,6} = min([controlanalysis.dendrite.numbersegments.values]);
	position{12,6} = min([controlanalysis.dendrite.numberbifurcations.values]);
	position{13,6} = min([controlanalysis.dendrite.numberterminations.values]);
	%position{14,6} = 'Branch Order';
	position{15,6} = min([controlanalysis.dendrite.cable.branchorder.values]);
	position{16,6} = min([controlanalysis.dendrite.bifurcation.cable.branchorder.values]);
	position{17,6} = min([controlanalysis.dendrite.termination.cable.branchorder.values]);
	%position{18,6} = 'Degree';
	position{19,6} = min([controlanalysis.dendrite.cable.degree.values]);
	position{20,6} = min([controlanalysis.dendrite.bifurcation.cable.degree.values]);
	position{21,6} = min([controlanalysis.dendrite.termination.cable.degree.values]);
	%position{22,6} = 'Taper Rate';
	position{23,6} = 1000*min([controlanalysis.dendrite.cable.taperrate.values]);
	position{24,6} = 1000*min([controlanalysis.dendrite.bifurcation.cable.taperrate.values]);
	position{25,6} = 1000*min([controlanalysis.dendrite.termination.cable.taperrate.values]);
	%position{26,6} = 'Diameter';
	position{27,6} = controlanalysis.dendrite.popmindiameter;
	position{28,6} = min([[controlanalysis.dendrite.bifurcation.piece.proximaldiameter] [controlanalysis.dendrite.bifurcation.piece.distaldiameter]]);
	position{29,6} = min([[controlanalysis.dendrite.termination.piece.proximaldiameter] [controlanalysis.dendrite.termination.piece.distaldiameter]]);
	%position{30,6} = 'Branch Length';
	position{31,6} = min([controlanalysis.dendrite.cable.length.values]);
	position{32,6} = min([controlanalysis.dendrite.bifurcation.cable.length.values]);
	position{33,6} = min([controlanalysis.dendrite.termination.cable.length.values]);
	%position{34,6} = 'Branch Surface Area';
	position{35,6} = min([controlanalysis.dendrite.cable.surfacearea.values]);
	position{36,6} = min([controlanalysis.dendrite.bifurcation.cable.surfacearea.values]);
	position{37,6} = min([controlanalysis.dendrite.termination.cable.surfacearea.values]);
	%position{38,6} = 'Branch Volume';
	position{39,6} = min([controlanalysis.dendrite.cable.volume.values]);
	position{40,6} = min([controlanalysis.dendrite.bifurcation.cable.volume.values]);
	position{41,6} = min([controlanalysis.dendrite.termination.cable.volume.values]);
	position{42,6} = min([controlanalysis.dendrite.cable.rallratio.values]);
	position{43,6} = min([controlanalysis.dendrite.cable.rallratio2.values]);
	position{44,6} = min([controlanalysis.dendrite.cable.daughterratio.values]);
	position{45,6} = min([controlanalysis.dendrite.termination.cable.distalpathlength.values]);
	position{46,6} = min([controlanalysis.dendrite.bifurcation.cable.partitionasymmetry.values]);
	position{47,6} = min([controlanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values]);
	
	
	
	
	position{2,7} = '"Max"';
	position{3,7} = max([controlanalysis.soma.diameter.values]);
	position{4,7} = max([controlanalysis.dendrite.numbertrunks.values]);
	position{5,7} = max([controlanalysis.dendrite.trunk.proximaldiameter.values]);
	%position{6,7} = 'Total Dendritic';
	position{7,7} = max([controlanalysis.dendrite.totallength.values]);
	position{8,7} = max([controlanalysis.dendrite.totalsurfacearea.values]);
	position{9,7} = max([controlanalysis.dendrite.totalvolume.values]);
	%position{10,7} = 'Segment Numbers';
	position{11,7} = max([controlanalysis.dendrite.numbersegments.values]);
	position{12,7} = max([controlanalysis.dendrite.numberbifurcations.values]);
	position{13,7} = max([controlanalysis.dendrite.numberterminations.values]);
	%position{14,7} = 'Branch Order';
	position{15,7} = max([controlanalysis.dendrite.cable.branchorder.values]);
	position{16,7} = max([controlanalysis.dendrite.bifurcation.cable.branchorder.values]);
	position{17,7} = max([controlanalysis.dendrite.termination.cable.branchorder.values]);
	%position{18,7} = 'Degree';
	position{19,7} = max([controlanalysis.dendrite.cable.degree.values]);
	position{20,7} = max([controlanalysis.dendrite.bifurcation.cable.degree.values]);
	position{21,7} = max([controlanalysis.dendrite.termination.cable.degree.values]);
	%position{22,7} = 'Taper Rate';
	position{23,7} = 1000*max([controlanalysis.dendrite.cable.taperrate.values]);
	position{24,7} = 1000*max([controlanalysis.dendrite.bifurcation.cable.taperrate.values]);
	position{25,7} = 1000*max([controlanalysis.dendrite.termination.cable.taperrate.values]);
	%position{26,7} = 'Diameter';
	position{27,7} = controlanalysis.dendrite.popmaxdiameter;
	position{28,7} = max([[controlanalysis.dendrite.bifurcation.piece.proximaldiameter] [controlanalysis.dendrite.bifurcation.piece.distaldiameter]]);
	position{29,7} = max([[controlanalysis.dendrite.termination.piece.proximaldiameter] [controlanalysis.dendrite.termination.piece.distaldiameter]]);
	%position{30,7} = 'Branch Length';
	position{31,7} = max([controlanalysis.dendrite.cable.length.values]);
	position{32,7} = max([controlanalysis.dendrite.bifurcation.cable.length.values]);
	position{33,7} = max([controlanalysis.dendrite.termination.cable.length.values]);
	%position{34,7} = 'Branch Surface Area';
	position{35,7} = max([controlanalysis.dendrite.cable.surfacearea.values]);
	position{36,7} = max([controlanalysis.dendrite.bifurcation.cable.surfacearea.values]);
	position{37,7} = max([controlanalysis.dendrite.termination.cable.surfacearea.values]);
	%position{38,7} = 'Branch Volume';
	position{39,7} = max([controlanalysis.dendrite.cable.volume.values]);
	position{40,7} = max([controlanalysis.dendrite.bifurcation.cable.volume.values]);
	position{41,7} = max([controlanalysis.dendrite.termination.cable.volume.values]);
	position{42,7} = max([controlanalysis.dendrite.cable.rallratio.values]);
	position{43,7} = max([controlanalysis.dendrite.cable.rallratio2.values]);
	position{44,7} = max([controlanalysis.dendrite.cable.daughterratio.values]);
	position{45,7} = max([controlanalysis.dendrite.termination.cable.distalpathlength.values]);
	position{46,7} = max([controlanalysis.dendrite.bifurcation.cable.partitionasymmetry.values]);
	position{47,7} = max([controlanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values]);


    filename = sprintf('%s_%s',controlanalysis.inputfilename,'summary_table.csv');
	%xlswrite(filename,rowcolposition);
	cell2csv(filename,position);
    cd(currentdirectory);

end

if nargin == 2
    
    
	position{1,1} = '"Comparison Table"';
	position{2,1} = '"Measure"';
	position{3,1} = '"Soma Diameter"';
	position{4,1} = '"Number Primary Dendrites"';
	position{5,1} = '"PD Proximal Diameter"';
	position{6,1} = '"Total Dendritic"';
	position{7,1} = '"     Length"';
	position{8,1} = '"     Surface Area"';
	position{9,1} = '"     Volume"';
	position{10,1} = '"Segment Numbers"';
	position{11,1} = '"     Combined"';
	position{12,1} = '"     Intermediate"';
	position{13,1} = '"     Terminal"';
	position{14,1} = '"Branch Order"';
	position{15,1} = '"     Combined"';
	position{16,1} = '"	    Intermediate"';
	position{17,1} = '"	    Terminal"';
	position{18,1} = '"Degree"';
	position{19,1} = '"	    Combined"';
	position{20,1} = '"	    Intermediate"';
	position{21,1} = '"	    Terminal"';
	position{22,1} = '"Taper Rate (by segment)"';
	position{23,1} = '"	    Combined"';
	position{24,1} = '"	    Intermediate"';
	position{25,1} = '"	    Terminal"';
	position{26,1} = '"Segment Avg. Diameter"';
	position{27,1} = '"	    Combined"';
	position{28,1} = '"	    Intermediate"';
	position{29,1} = '"	    Terminal"';
	position{30,1} = '"Branch Length"';
	position{31,1} = '"	    Combined"';
	position{32,1} = '"	    Intermediate"';
	position{33,1} = '"	    Terminal"';
	position{34,1} = '"Branch Surface Area"';
	position{35,1} = '"	    Combined"';
	position{36,1} = '"	    Intermediate"';
	position{37,1} = '"	    Terminal"';
	position{38,1} = '"Branch Volume"';
	position{39,1} = '"	    Combined"';
	position{40,1} = '"	    Intermediate"';
	position{41,1} = '"	    Terminal"';
	position{42,1} = '"Rall (1.5) Ratio"';
	position{43,1} = '"Rall (2.0) Ratio"';
	position{44,1} = '"Daughter Ratio"';
	position{45,1} = '"Termination Path Length"';
	position{46,1} = '"Bifurcation Asymmetry"';
	position{47,1} = '"Surface Asymmetry"';
	
	position{1,2} = sprintf('"%s"',controlanalysis.inputfilename);
	position{2,2} = '"Mean"';
	position{3,2} = mean([controlanalysis.soma.diameter.values]);
	position{4,2} = mean([controlanalysis.dendrite.numbertrunks.values]);
	position{5,2} = mean([controlanalysis.dendrite.trunk.proximaldiameter.values]);
	%position{6,2} = 'Total Dendritic';
	position{7,2} = mean([controlanalysis.dendrite.totallength.values]);
	position{8,2} = mean([controlanalysis.dendrite.totalsurfacearea.values]);
	position{9,2} = mean([controlanalysis.dendrite.totalvolume.values]);
	%position{10,2} = 'Segment Numbers';
	position{11,2} = mean([controlanalysis.dendrite.numbersegments.values]);
	position{12,2} = mean([controlanalysis.dendrite.numberbifurcations.values]);
	position{13,2} = mean([controlanalysis.dendrite.numberterminations.values]);
	%position{14,2} = 'Branch Order';
	position{15,2} = mean([controlanalysis.dendrite.cable.branchorder.values]);
	position{16,2} = mean([controlanalysis.dendrite.bifurcation.cable.branchorder.values]);
	position{17,2} = mean([controlanalysis.dendrite.termination.cable.branchorder.values]);
	%position{18,2} = 'Degree';
	position{19,2} = mean([controlanalysis.dendrite.cable.degree.values]);
	position{20,2} = mean([controlanalysis.dendrite.bifurcation.cable.degree.values]);
	position{21,2} = mean([controlanalysis.dendrite.termination.cable.degree.values]);
	%position{22,2} = 'Taper Rate';
	position{23,2} = 1000*mean([controlanalysis.dendrite.cable.taperrate.values]);
	position{24,2} = 1000*mean([controlanalysis.dendrite.bifurcation.cable.taperrate.values]);
	position{25,2} = 1000*mean([controlanalysis.dendrite.termination.cable.taperrate.values]);
	%position{26,2} = 'Diameter';
	position{27,2} = mean([controlanalysis.dendrite.cable.cylindricaldiameter.values]); %sum( [controlanalysis.diameter.diameter].* ( [controlanalysis.diameter.length.total] / sum([controlanalysis.dendrite.cable.length.values]) ) );
	position{28,2} = mean([controlanalysis.dendrite.bifurcation.cable.cylindricaldiameter.values]); %sum( [controlanalysis.dendrite.bifurcation.diameter.diameter].* ( [controlanalysis.dendrite.bifurcation.diameter.length.total] / sum([controlanalysis.dendrite.bifurcation.cable.length.values]) ) );
	position{29,2} = mean([controlanalysis.dendrite.termination.cable.cylindricaldiameter.values]); %sum( [controlanalysis.dendrite.termination.diameter.diameter].* ( [controlanalysis.dendrite.termination.diameter.length.total] / sum([controlanalysis.dendrite.termination.cable.length.values]) ) );
	%position{30,2} = 'Branch Length';
	position{31,2} = mean([controlanalysis.dendrite.cable.length.values]);
	position{32,2} = mean([controlanalysis.dendrite.bifurcation.cable.length.values]);
	position{33,2} = mean([controlanalysis.dendrite.termination.cable.length.values]);
	%position{34,2} = 'Branch Surface Area';
	position{35,2} = mean([controlanalysis.dendrite.cable.surfacearea.values]);
	position{36,2} = mean([controlanalysis.dendrite.bifurcation.cable.surfacearea.values]);
	position{37,2} = mean([controlanalysis.dendrite.termination.cable.surfacearea.values]);
	%position{38,2} = 'Branch Volume';
	position{39,2} = mean([controlanalysis.dendrite.cable.volume.values]);
	position{40,2} = mean([controlanalysis.dendrite.bifurcation.cable.volume.values]);
	position{41,2} = mean([controlanalysis.dendrite.termination.cable.volume.values]);
	position{42,2} = mean([controlanalysis.dendrite.cable.rallratio.values]);
	position{43,2} = mean([controlanalysis.dendrite.cable.rallratio2.values]);
	position{44,2} = mean([controlanalysis.dendrite.cable.daughterratio.values]);
	position{45,2} = mean([controlanalysis.dendrite.termination.cable.distalpathlength.values]);
	position{46,2} = mean([controlanalysis.dendrite.bifurcation.cable.partitionasymmetry.values]);
	position{47,2} = mean([controlanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values]);
	
	
	
	
	position{2,3} = '"StDv"';
	position{3,3} = std([controlanalysis.soma.diameter.values]);
	position{4,3} = std([controlanalysis.dendrite.numbertrunks.values]);
	position{5,3} = std([controlanalysis.dendrite.trunk.proximaldiameter.values]);
	%position{6,3} = 'Total Dendritic';
	position{7,3} = std([controlanalysis.dendrite.totallength.values]);
	position{8,3} = std([controlanalysis.dendrite.totalsurfacearea.values]);
	position{9,3} = std([controlanalysis.dendrite.totalvolume.values]);
	%position{10,3} = 'Segment Numbers';
	position{11,3} = std([controlanalysis.dendrite.numbersegments.values]);
	position{12,3} = std([controlanalysis.dendrite.numberbifurcations.values]);
	position{13,3} = std([controlanalysis.dendrite.numberterminations.values]);
	%position{14,3} = 'Branch Order';
	position{15,3} = std([controlanalysis.dendrite.cable.branchorder.values]);
	position{16,3} = std([controlanalysis.dendrite.bifurcation.cable.branchorder.values]);
	position{17,3} = std([controlanalysis.dendrite.termination.cable.branchorder.values]);
	%position{18,3} = 'Degree';
	position{19,3} = std([controlanalysis.dendrite.cable.degree.values]);
	position{20,3} = std([controlanalysis.dendrite.bifurcation.cable.degree.values]);
	position{21,3} = std([controlanalysis.dendrite.termination.cable.degree.values]);
	%position{22,3} = 'Taper Rate';
	position{23,3} = 1000*std([controlanalysis.dendrite.cable.taperrate.values]);
	position{24,3} = 1000*std([controlanalysis.dendrite.bifurcation.cable.taperrate.values]);
	position{25,3} = 1000*std([controlanalysis.dendrite.termination.cable.taperrate.values]);
	%position{26,3} = 'Diameter';
	position{27,3} = std([controlanalysis.dendrite.cable.cylindricaldiameter.values]); %(sum((([controlanalysis.diameter.diameter] - position{27,2}).^2).*([controlanalysis.diameter.length.total]/sum([controlanalysis.dendrite.cable.length.values]))))^0.5;
	position{28,3} = std([controlanalysis.dendrite.bifurcation.cable.cylindricaldiameter.values]); %(sum((([controlanalysis.dendrite.bifurcation.diameter.diameter] - position{28,2}).^2).*([controlanalysis.dendrite.bifurcation.diameter.length.total]/sum([controlanalysis.dendrite.bifurcation.cable.length.values]))))^0.5;
	position{29,3} = std([controlanalysis.dendrite.termination.cable.cylindricaldiameter.values]); %(sum((([controlanalysis.dendrite.termination.diameter.diameter] - position{29,2}).^2).*([controlanalysis.dendrite.termination.diameter.length.total]/sum([controlanalysis.dendrite.termination.cable.length.values]))))^0.5;
	%position{30,3} = 'Branch Length';
	position{31,3} = std([controlanalysis.dendrite.cable.length.values]);
	position{32,3} = std([controlanalysis.dendrite.bifurcation.cable.length.values]);
	position{33,3} = std([controlanalysis.dendrite.termination.cable.length.values]);
	%position{34,3} = 'Branch Surface Area';
	position{35,3} = std([controlanalysis.dendrite.cable.surfacearea.values]);
	position{36,3} = std([controlanalysis.dendrite.bifurcation.cable.surfacearea.values]);
	position{37,3} = std([controlanalysis.dendrite.termination.cable.surfacearea.values]);
	%position{38,3} = 'Branch Volume';
	position{39,3} = std([controlanalysis.dendrite.cable.volume.values]);
	position{40,3} = std([controlanalysis.dendrite.bifurcation.cable.volume.values]);
	position{41,3} = std([controlanalysis.dendrite.termination.cable.volume.values]);
	position{42,3} = std([controlanalysis.dendrite.cable.rallratio.values]);
	position{43,3} = std([controlanalysis.dendrite.cable.rallratio2.values]);
	position{44,3} = std([controlanalysis.dendrite.cable.daughterratio.values]);
	position{45,3} = std([controlanalysis.dendrite.termination.cable.distalpathlength.values]);
	position{46,3} = std([controlanalysis.dendrite.bifurcation.cable.partitionasymmetry.values]);
	position{47,3} = std([controlanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values]);
	
	
	position{1,4} = sprintf('"%s"',testanalysis.inputfilename);
	position{2,4} = '"Mean"';
	position{3,4} = mean([testanalysis.soma.diameter.values]);
	position{4,4} = mean([testanalysis.dendrite.numbertrunks.values]);
	position{5,4} = mean([testanalysis.dendrite.trunk.proximaldiameter.values]);
	%position{6,4} = 'Total Dendritic';
	position{7,4} = mean([testanalysis.dendrite.totallength.values]);
	position{8,4} = mean([testanalysis.dendrite.totalsurfacearea.values]);
	position{9,4} = mean([testanalysis.dendrite.totalvolume.values]);
	%position{10,4} = 'Segment Numbers';
	position{11,4} = mean([testanalysis.dendrite.numbersegments.values]);
	position{12,4} = mean([testanalysis.dendrite.numberbifurcations.values]);
	position{13,4} = mean([testanalysis.dendrite.numberterminations.values]);
	%position{14,4} = 'Branch Order';
	position{15,4} = mean([testanalysis.dendrite.cable.branchorder.values]);
	position{16,4} = mean([testanalysis.dendrite.bifurcation.cable.branchorder.values]);
	position{17,4} = mean([testanalysis.dendrite.termination.cable.branchorder.values]);
	%position{18,4} = 'Degree';
	position{19,4} = mean([testanalysis.dendrite.cable.degree.values]);
	position{20,4} = mean([testanalysis.dendrite.bifurcation.cable.degree.values]);
	position{21,4} = mean([testanalysis.dendrite.termination.cable.degree.values]);
	%position{22,4} = 'Taper Rate';
	position{23,4} = 1000*mean([testanalysis.dendrite.cable.taperrate.values]);
	position{24,4} = 1000*mean([testanalysis.dendrite.bifurcation.cable.taperrate.values]);
	position{25,4} = 1000*mean([testanalysis.dendrite.termination.cable.taperrate.values]);
	%position{26,4} = 'Diameter';
	position{27,4} = mean([testanalysis.dendrite.cable.cylindricaldiameter.values]); %(sum((([controlanalysis.diameter.diameter] - position{27,2}).^2).*([controlanalysis.diameter.length.total]/sum([controlanalysis.dendrite.cable.length.values]))))^0.5;
	position{28,4} = mean([testanalysis.dendrite.bifurcation.cable.cylindricaldiameter.values]); %(sum((([controlanalysis.dendrite.bifurcation.diameter.diameter] - position{28,2}).^2).*([controlanalysis.dendrite.bifurcation.diameter.length.total]/sum([controlanalysis.dendrite.bifurcation.cable.length.values]))))^0.5;
	position{29,4} = mean([testanalysis.dendrite.termination.cable.cylindricaldiameter.values]); %(sum((([controlanalysis.dendrite.termination.diameter.diameter] - position{29,2}).^2).*([controlanalysis.dendrite.termination.diameter.length.total]/sum([controlanalysis.dendrite.termination.cable.length.values]))))^0.5;
	%position{30,4} = 'Branch Length';
	position{31,4} = mean([testanalysis.dendrite.cable.length.values]);
	position{32,4} = mean([testanalysis.dendrite.bifurcation.cable.length.values]);
	position{33,4} = mean([testanalysis.dendrite.termination.cable.length.values]);
	%position{34,4} = 'Branch Surface Area';
	position{35,4} = mean([testanalysis.dendrite.cable.surfacearea.values]);
	position{36,4} = mean([testanalysis.dendrite.bifurcation.cable.surfacearea.values]);
	position{37,4} = mean([testanalysis.dendrite.termination.cable.surfacearea.values]);
	%position{38,4} = 'Branch Volume';
	position{39,4} = mean([testanalysis.dendrite.cable.volume.values]);
	position{40,4} = mean([testanalysis.dendrite.bifurcation.cable.volume.values]);
	position{41,4} = mean([testanalysis.dendrite.termination.cable.volume.values]);
	position{42,4} = mean([testanalysis.dendrite.cable.rallratio.values]);
	position{43,4} = mean([testanalysis.dendrite.cable.rallratio2.values]);
	position{44,4} = mean([testanalysis.dendrite.cable.daughterratio.values]);
	position{45,4} = mean([testanalysis.dendrite.termination.cable.distalpathlength.values]);
	position{46,4} = mean([testanalysis.dendrite.bifurcation.cable.partitionasymmetry.values]);
	position{47,4} = mean([testanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values]);
	
	
	
	
	position{2,5} = '"StDv"';
	position{3,5} = std([testanalysis.soma.diameter.values]);
	position{4,5} = std([testanalysis.dendrite.numbertrunks.values]);
	position{5,5} = std([testanalysis.dendrite.trunk.proximaldiameter.values]);
	%position{6,5} = 'Total Dendritic';
	position{7,5} = std([testanalysis.dendrite.totallength.values]);
	position{8,5} = std([testanalysis.dendrite.totalsurfacearea.values]);
	position{9,5} = std([testanalysis.dendrite.totalvolume.values]);
	%position{10,5} = 'Segment Numbers';
	position{11,5} = std([testanalysis.dendrite.numbersegments.values]);
	position{12,5} = std([testanalysis.dendrite.numberbifurcations.values]);
	position{13,5} = std([testanalysis.dendrite.numberterminations.values]);
	%position{14,5} = 'Branch Order';
	position{15,5} = std([testanalysis.dendrite.cable.branchorder.values]);
	position{16,5} = std([testanalysis.dendrite.bifurcation.cable.branchorder.values]);
	position{17,5} = std([testanalysis.dendrite.termination.cable.branchorder.values]);
	%position{18,5} = 'Degree';
	position{19,5} = std([testanalysis.dendrite.cable.degree.values]);
	position{20,5} = std([testanalysis.dendrite.bifurcation.cable.degree.values]);
	position{21,5} = std([testanalysis.dendrite.termination.cable.degree.values]);
	%position{22,5} = 'Taper Rate';
	position{23,5} = 1000*std([testanalysis.dendrite.cable.taperrate.values]);
	position{24,5} = 1000*std([testanalysis.dendrite.bifurcation.cable.taperrate.values]);
	position{25,5} = 1000*std([testanalysis.dendrite.termination.cable.taperrate.values]);
	%position{26,5} = 'Diameter';
	position{27,5} = std([testanalysis.dendrite.cable.cylindricaldiameter.values]); %(sum((([controlanalysis.diameter.diameter] - position{27,2}).^2).*([controlanalysis.diameter.length.total]/sum([controlanalysis.dendrite.cable.length.values]))))^0.5;
	position{28,5} = std([testanalysis.dendrite.bifurcation.cable.cylindricaldiameter.values]); %(sum((([controlanalysis.dendrite.bifurcation.diameter.diameter] - position{28,2}).^2).*([controlanalysis.dendrite.bifurcation.diameter.length.total]/sum([controlanalysis.dendrite.bifurcation.cable.length.values]))))^0.5;
	position{29,5} = std([testanalysis.dendrite.termination.cable.cylindricaldiameter.values]); %(sum((([controlanalysis.dendrite.termination.diameter.diameter] - position{29,2}).^2).*([controlanalysis.dendrite.termination.diameter.length.total]/sum([controlanalysis.dendrite.termination.cable.length.values]))))^0.5;
	%position{30,5} = 'Branch Length';
	position{31,5} = std([testanalysis.dendrite.cable.length.values]);
	position{32,5} = std([testanalysis.dendrite.bifurcation.cable.length.values]);
	position{33,5} = std([testanalysis.dendrite.termination.cable.length.values]);
	%position{34,5} = 'Branch Surface Area';
	position{35,5} = std([testanalysis.dendrite.cable.surfacearea.values]);
	position{36,5} = std([testanalysis.dendrite.bifurcation.cable.surfacearea.values]);
	position{37,5} = std([testanalysis.dendrite.termination.cable.surfacearea.values]);
	%position{38,5} = 'Branch Volume';
	position{39,5} = std([testanalysis.dendrite.cable.volume.values]);
	position{40,5} = std([testanalysis.dendrite.bifurcation.cable.volume.values]);
	position{41,5} = std([testanalysis.dendrite.termination.cable.volume.values]);
	position{42,5} = std([testanalysis.dendrite.cable.rallratio.values]);
	position{43,5} = std([testanalysis.dendrite.cable.rallratio2.values]);
	position{44,5} = std([testanalysis.dendrite.cable.daughterratio.values]);
	position{45,5} = std([testanalysis.dendrite.termination.cable.distalpathlength.values]);
	position{46,5} = std([testanalysis.dendrite.bifurcation.cable.partitionasymmetry.values]);
	position{47,5} = std([testanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values]);
	
	
	position{1,6} = '"Mean Diff"';
	position{2,6} = '"(Percent)"';
	position{3,6} = -100*(position{3,2} - position{3,4})/position{3,2};
	position{4,6} = -100*(position{4,2} - position{4,4})/position{4,2};
	position{5,6} = -100*(position{5,2} - position{5,4})/position{5,2};
	%position{6,6} = 'Total Dendritic';
	position{7,6} = -100*(position{7,2} - position{7,4})/position{7,2};
	position{8,6} = -100*(position{8,2} - position{8,4})/position{8,2};
	position{9,6} = -100*(position{9,2} - position{9,4})/position{9,2};
	%position{10,6} = 'Segment Numbers';
	position{11,6} = -100*(position{11,2} - position{11,4})/position{11,2};
	position{12,6} = -100*(position{12,2} - position{12,4})/position{12,2};
	position{13,6} = -100*(position{13,2} - position{13,4})/position{13,2};
	%position{14,6} = 'Branch Order';
	position{15,6} = -100*(position{15,2} - position{15,4})/position{15,2};
	position{16,6} = -100*(position{16,2} - position{16,4})/position{16,2};
	position{17,6} = -100*(position{17,2} - position{17,4})/position{17,2};
	%position{18,6} = 'Degree';
	position{19,6} = -100*(position{19,2} - position{19,4})/position{19,2};
	position{20,6} = -100*(position{20,2} - position{20,4})/position{20,2};
	position{21,6} = -100*(position{21,2} - position{21,4})/position{21,2};
	%position{22,6} = 'Taper Rate';
	position{23,6} = -100*(position{23,2} - position{23,4})/position{23,2};
	position{24,6} = -100*(position{24,2} - position{24,4})/position{24,2};
	position{25,6} = -100*(position{25,2} - position{25,4})/position{25,2};
	%position{26,6} = 'Diameter';
	position{27,6} = -100*(position{27,2} - position{27,4})/position{27,2};
	position{28,6} = -100*(position{28,2} - position{28,4})/position{28,2};
	position{29,6} = -100*(position{29,2} - position{29,4})/position{29,2};
	%position{30,6} = 'Branch Length';
	position{31,6} = -100*(position{31,2} - position{31,4})/position{31,2};
	position{32,6} = -100*(position{32,2} - position{32,4})/position{32,2};
	position{33,6} = -100*(position{33,2} - position{33,4})/position{33,2};
	%position{34,6} = 'Branch Surface Area';
	position{35,6} = -100*(position{35,2} - position{35,4})/position{35,2};
	position{36,6} = -100*(position{36,2} - position{36,4})/position{36,2};
	position{37,6} = -100*(position{37,2} - position{37,4})/position{37,2};
	%position{38,6} = 'Branch Volume';
	position{39,6} = -100*(position{39,2} - position{39,4})/position{39,2};
	position{40,6} = -100*(position{40,2} - position{40,4})/position{40,2};
	position{41,6} = -100*(position{41,2} - position{41,4})/position{41,2};
	position{42,6} = -100*(position{42,2} - position{42,4})/position{42,2};
	position{43,6} = -100*(position{43,2} - position{43,4})/position{43,2};
	position{44,6} = -100*(position{44,2} - position{44,4})/position{44,2};
	position{45,6} = -100*(position{45,2} - position{45,4})/position{45,2};
	position{46,6} = -100*(position{46,2} - position{46,4})/position{46,2};
	position{47,6} = -100*(position{47,2} - position{47,4})/position{47,2};
	
	
	[h3,p3]   = ttest2([controlanalysis.soma.diameter.values],[testanalysis.soma.diameter.values]);
	[h4,p4]   = ttest2([controlanalysis.dendrite.numbertrunks.values],[testanalysis.dendrite.numbertrunks.values]);
	[h5,p5]   = ttest2([controlanalysis.dendrite.trunk.proximaldiameter.values],[testanalysis.dendrite.trunk.proximaldiameter.values]);
	[h7,p7]   = ttest2([controlanalysis.dendrite.totallength.values],[testanalysis.dendrite.totallength.values]);
	[h8,p8]   = ttest2([controlanalysis.dendrite.totalsurfacearea.values],[testanalysis.dendrite.totalsurfacearea.values]);
	[h9,p9]   = ttest2([controlanalysis.dendrite.totalvolume.values],[testanalysis.dendrite.totalvolume.values]);
	[h11,p11] = ttest2([controlanalysis.dendrite.numbersegments.values],[testanalysis.dendrite.numbersegments.values]);
	[h12,p12] = ttest2([controlanalysis.dendrite.numberbifurcations.values],[testanalysis.dendrite.numberbifurcations.values]);
	[h13,p13] = ttest2([controlanalysis.dendrite.numberterminations.values],[testanalysis.dendrite.numberterminations.values]);
	[h15,p15] = ttest2([controlanalysis.dendrite.cable.branchorder.values],[testanalysis.dendrite.cable.branchorder.values]);
	[h16,p16] = ttest2([controlanalysis.dendrite.bifurcation.cable.branchorder.values],[testanalysis.dendrite.bifurcation.cable.branchorder.values]);
	[h17,p17] = ttest2([controlanalysis.dendrite.termination.cable.branchorder.values],[testanalysis.dendrite.termination.cable.branchorder.values]);
	[h19,p19] = ttest2([controlanalysis.dendrite.cable.degree.values],[testanalysis.dendrite.cable.degree.values]);
	[h20,p20] = ttest2([controlanalysis.dendrite.bifurcation.cable.degree.values],[testanalysis.dendrite.bifurcation.cable.degree.values]);
	[h21,p21] = ttest2([controlanalysis.dendrite.termination.cable.degree.values],[testanalysis.dendrite.termination.cable.degree.values]);
	[h23,p23] = ttest2([controlanalysis.dendrite.cable.taperrate.values],[testanalysis.dendrite.cable.taperrate.values]);
	[h24,p24] = ttest2([controlanalysis.dendrite.bifurcation.cable.taperrate.values],[testanalysis.dendrite.bifurcation.cable.taperrate.values]);
	[h25,p25] = ttest2([controlanalysis.dendrite.termination.cable.taperrate.values],[testanalysis.dendrite.termination.cable.taperrate.values]);
	[h27,p27] = ttest2([controlanalysis.dendrite.cable.cylindricaldiameter.values],[testanalysis.dendrite.cable.cylindricaldiameter.values]);
	[h28,p28] = ttest2([controlanalysis.dendrite.bifurcation.cable.cylindricaldiameter.values],[testanalysis.dendrite.bifurcation.cable.cylindricaldiameter.values]);
	[h29,p29] = ttest2([controlanalysis.dendrite.termination.cable.cylindricaldiameter.values],[testanalysis.dendrite.termination.cable.cylindricaldiameter.values]);
	[h31,p31] = ttest2([controlanalysis.dendrite.cable.length.values],[testanalysis.dendrite.cable.length.values]);
	[h32,p32] = ttest2([controlanalysis.dendrite.bifurcation.cable.length.values],[testanalysis.dendrite.bifurcation.cable.length.values]);
	[h33,p33] = ttest2([controlanalysis.dendrite.termination.cable.length.values],[testanalysis.dendrite.termination.cable.length.values]);
	[h35,p35] = ttest2([controlanalysis.dendrite.cable.surfacearea.values],[testanalysis.dendrite.cable.surfacearea.values]);
	[h36,p36] = ttest2([controlanalysis.dendrite.bifurcation.cable.surfacearea.values],[testanalysis.dendrite.bifurcation.cable.surfacearea.values]);
	[h37,p37] = ttest2([controlanalysis.dendrite.termination.cable.surfacearea.values],[testanalysis.dendrite.termination.cable.surfacearea.values]);
	[h39,p39] = ttest2([controlanalysis.dendrite.cable.volume.values],[testanalysis.dendrite.cable.volume.values]);
	[h40,p40] = ttest2([controlanalysis.dendrite.bifurcation.cable.volume.values],[testanalysis.dendrite.bifurcation.cable.volume.values]);
	[h41,p41] = ttest2([controlanalysis.dendrite.termination.cable.volume.values],[testanalysis.dendrite.termination.cable.volume.values]);
	[h42,p42] = ttest2([controlanalysis.dendrite.cable.rallratio.values],[testanalysis.dendrite.cable.rallratio.values]);
	[h43,p43] = ttest2([controlanalysis.dendrite.cable.rallratio2.values],[testanalysis.dendrite.cable.rallratio2.values]);
	[h44,p44] = ttest2([controlanalysis.dendrite.cable.daughterratio.values],[testanalysis.dendrite.cable.daughterratio.values]);
	[h45,p45] = ttest2([controlanalysis.dendrite.termination.cable.distalpathlength.values],[testanalysis.dendrite.termination.cable.distalpathlength.values]);
	[h46,p46] = ttest2([controlanalysis.dendrite.bifurcation.cable.partitionasymmetry.values],[testanalysis.dendrite.bifurcation.cable.partitionasymmetry.values]);
	[h47,p47] = ttest2([controlanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values],[testanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values]);
	
	
	if h3 == 0, h3 = 'same'; else h3 = 'diff'; end;
	if h4 == 0, h4 = 'same'; else h4 = 'diff'; end;
	if h5 == 0, h5 = 'same'; else h5 = 'diff'; end;
	if h7 == 0, h7 = 'same'; else h7 = 'diff'; end;
	if h8 == 0, h8 = 'same'; else h8 = 'diff'; end;
	if h9 == 0, h9 = 'same'; else h9 = 'diff'; end;
	if h11 == 0, h11 = 'same'; else h11 = 'diff'; end;
	if h12 == 0, h12 = 'same'; else h12 = 'diff'; end;
	if h13 == 0, h13 = 'same'; else h13 = 'diff'; end;
	if h15 == 0, h15 = 'same'; else h15 = 'diff'; end;
	if h16 == 0, h16 = 'same'; else h16 = 'diff'; end;
	if h17 == 0, h17 = 'same'; else h17 = 'diff'; end;
	if h19 == 0, h19 = 'same'; else h19 = 'diff'; end;
	if h20 == 0, h20 = 'same'; else h20 = 'diff'; end;
	if h21 == 0, h21 = 'same'; else h21 = 'diff'; end;
	if h23 == 0, h23 = 'same'; else h23 = 'diff'; end;
	if h24 == 0, h24 = 'same'; else h24 = 'diff'; end;
	if h25 == 0, h25 = 'same'; else h25 = 'diff'; end;
	if h27 == 0, h27 = 'same'; else h27 = 'diff'; end;
	if h28 == 0, h28 = 'same'; else h28 = 'diff'; end;
	if h29 == 0, h29 = 'same'; else h29 = 'diff'; end;
	if h31 == 0, h31 = 'same'; else h31 = 'diff'; end;
	if h32 == 0, h32 = 'same'; else h32 = 'diff'; end;
	if h33 == 0, h33 = 'same'; else h33 = 'diff'; end;
	if h35 == 0, h35 = 'same'; else h35 = 'diff'; end;
	if h36 == 0, h36 = 'same'; else h36 = 'diff'; end;
	if h37 == 0, h37 = 'same'; else h37 = 'diff'; end;
	if h39 == 0, h39 = 'same'; else h39 = 'diff'; end;
	if h40 == 0, h40 = 'same'; else h40 = 'diff'; end;
	if h41 == 0, h41 = 'same'; else h41 = 'diff'; end;
	if h42 == 0, h42 = 'same'; else h42 = 'diff'; end;
	if h43 == 0, h43 = 'same'; else h43 = 'diff'; end;
	if h44 == 0, h44 = 'same'; else h44 = 'diff'; end;
	if h45 == 0, h45 = 'same'; else h45 = 'diff'; end;
	if h46 == 0, h46 = 'same'; else h46 = 'diff'; end;
	if h47 == 0, h47 = 'same'; else h47 = 'diff'; end;
	
	
	position{1,7} = '"t-test"';
	position{2,7} = '"h"';
	position{3,7} = h3;
	position{4,7} = h4;
	position{5,7} = h5;
	%position{6,7} = 'Total Dendritic';
	position{7,7} = h7;
	position{8,7} = h8;
	position{9,7} = h9;
	%position{10,7} = 'Segment Numbers';
	position{11,7} = h11;
	position{12,7} = h12;
	position{13,7} = h13;
	%position{14,7} = 'Branch Order';
	position{15,7} = h15;
	position{16,7} = h16;
	position{17,7} = h17;
	%position{18,7} = 'Degree';
	position{19,7} = h19;
	position{20,7} = h20;
	position{21,7} = h21;
	%position{22,7} = 'Taper Rate';
	position{23,7} = h23;
	position{24,7} = h24;
	position{25,7} = h25;
	%position{26,7} = 'Diameter';
	position{27,7} = h27;
	position{28,7} = h28;
	position{29,7} = h29;
	%position{30,7} = 'Branch Length';
	position{31,7} = h31;
	position{32,7} = h32;
	position{33,7} = h33;
	%position{34,7} = 'Branch Surface Area';
	position{35,7} = h35;
	position{36,7} = h36;
	position{37,7} = h37;
	%position{38,7} = 'Branch Volume';
	position{39,7} = h39;
	position{40,7} = h40;
	position{41,7} = h41;
	position{42,7} = h42;
	position{43,7} = h43;
	position{44,7} = h44;
	position{45,7} = h45;
	position{46,7} = h46;
	position{47,7} = h47;
	
	
	position{1,8} = '"(mean)"';
	position{2,8} = '"p"';
	position{3,8} = p3;
	position{4,8} = p4;
	position{5,8} = p5;
	%position{6,8} = 'Total Dendritic';
	position{7,8} = p7;
	position{8,8} = p8;
	position{9,8} = p9;
	%position{10,8} = 'Segment Numbers';
	position{11,8} = p11;
	position{12,8} = p12;
	position{13,8} = p13;
	%position{14,8} = 'Branch Order';
	position{15,8} = p15;
	position{16,8} = p16;
	position{17,8} = p17;
	%position{18,8} = 'Degree';
	position{19,8} = p19;
	position{20,8} = p20;
	position{21,8} = p21;
	%position{22,8} = 'Taper Rate';
	position{23,8} = p23;
	position{24,8} = p24;
	position{25,8} = p25;
	%position{26,8} = 'Diameter';
	position{27,8} = p27;
	position{28,8} = p28;
	position{29,8} = p29;
	%position{30,8} = 'Branch Length';
	position{31,8} = p31;
	position{32,8} = p32;
	position{33,8} = p33;
	%position{34,8} = 'Branch Surface Area';
	position{35,8} = p35;
	position{36,8} = p36;
	position{37,8} = p37;
	%position{38,8} = 'Branch Volume';
	position{39,8} = p39;
	position{40,8} = p40;
	position{41,8} = p41;
	position{42,8} = p42;
	position{43,8} = p43;
	position{44,8} = p44;
	position{45,8} = p45;
	position{46,8} = p46;
	position{47,8} = p47;
	
	
	
	
	
	
	[p3,h3]   = ranksum([controlanalysis.soma.diameter.values],[testanalysis.soma.diameter.values]);
	[p4,h4]   = ranksum([controlanalysis.dendrite.numbertrunks.values],[testanalysis.dendrite.numbertrunks.values]);
	[p5,h5]   = ranksum([controlanalysis.dendrite.trunk.proximaldiameter.values],[testanalysis.dendrite.trunk.proximaldiameter.values]);
	[p7,h7]   = ranksum([controlanalysis.dendrite.totallength.values],[testanalysis.dendrite.totallength.values]);
	[p8,h8]   = ranksum([controlanalysis.dendrite.totalsurfacearea.values],[testanalysis.dendrite.totalsurfacearea.values]);
	[p9,h9]   = ranksum([controlanalysis.dendrite.totalvolume.values],[testanalysis.dendrite.totalvolume.values]);
	[p11,h11] = ranksum([controlanalysis.dendrite.numbersegments.values],[testanalysis.dendrite.numbersegments.values]);
	[p12,h12] = ranksum([controlanalysis.dendrite.numberbifurcations.values],[testanalysis.dendrite.numberbifurcations.values]);
	[p13,h13] = ranksum([controlanalysis.dendrite.numberterminations.values],[testanalysis.dendrite.numberterminations.values]);
	[p15,h15] = ranksum([controlanalysis.dendrite.cable.branchorder.values],[testanalysis.dendrite.cable.branchorder.values]);
	[p16,h16] = ranksum([controlanalysis.dendrite.bifurcation.cable.branchorder.values],[testanalysis.dendrite.bifurcation.cable.branchorder.values]);
	[p17,h17] = ranksum([controlanalysis.dendrite.termination.cable.branchorder.values],[testanalysis.dendrite.termination.cable.branchorder.values]);
	[p19,h19] = ranksum([controlanalysis.dendrite.cable.degree.values],[testanalysis.dendrite.cable.degree.values]);
	[p20,h20] = ranksum([controlanalysis.dendrite.bifurcation.cable.degree.values],[testanalysis.dendrite.bifurcation.cable.degree.values]);
	[p21,h21] = ranksum([controlanalysis.dendrite.termination.cable.degree.values],[testanalysis.dendrite.termination.cable.degree.values]);
	[p23,h23] = ranksum([controlanalysis.dendrite.cable.taperrate.values],[testanalysis.dendrite.cable.taperrate.values]);
	[p24,h24] = ranksum([controlanalysis.dendrite.bifurcation.cable.taperrate.values],[testanalysis.dendrite.bifurcation.cable.taperrate.values]);
	[p25,h25] = ranksum([controlanalysis.dendrite.termination.cable.taperrate.values],[testanalysis.dendrite.termination.cable.taperrate.values]);
	[p27,h27] = ranksum([controlanalysis.dendrite.cable.cylindricaldiameter.values],[testanalysis.dendrite.cable.cylindricaldiameter.values]);
	[p28,h28] = ranksum([controlanalysis.dendrite.bifurcation.cable.cylindricaldiameter.values],[testanalysis.dendrite.bifurcation.cable.cylindricaldiameter.values]);
	[p29,h29] = ranksum([controlanalysis.dendrite.termination.cable.cylindricaldiameter.values],[testanalysis.dendrite.termination.cable.cylindricaldiameter.values]);
	[p31,h31] = ranksum([controlanalysis.dendrite.cable.length.values],[testanalysis.dendrite.cable.length.values]);
	[p32,h32] = ranksum([controlanalysis.dendrite.bifurcation.cable.length.values],[testanalysis.dendrite.bifurcation.cable.length.values]);
	[p33,h33] = ranksum([controlanalysis.dendrite.termination.cable.length.values],[testanalysis.dendrite.termination.cable.length.values]);
	[p35,h35] = ranksum([controlanalysis.dendrite.cable.surfacearea.values],[testanalysis.dendrite.cable.surfacearea.values]);
	[p36,h36] = ranksum([controlanalysis.dendrite.bifurcation.cable.surfacearea.values],[testanalysis.dendrite.bifurcation.cable.surfacearea.values]);
	[p37,h37] = ranksum([controlanalysis.dendrite.termination.cable.surfacearea.values],[testanalysis.dendrite.termination.cable.surfacearea.values]);
	[p39,h39] = ranksum([controlanalysis.dendrite.cable.volume.values],[testanalysis.dendrite.cable.volume.values]);
	[p40,h40] = ranksum([controlanalysis.dendrite.bifurcation.cable.volume.values],[testanalysis.dendrite.bifurcation.cable.volume.values]);
	[p41,h41] = ranksum([controlanalysis.dendrite.termination.cable.volume.values],[testanalysis.dendrite.termination.cable.volume.values]);
	[p42,h42] = ranksum([controlanalysis.dendrite.cable.rallratio.values],[testanalysis.dendrite.cable.rallratio.values]);
	[p43,h43] = ranksum([controlanalysis.dendrite.cable.rallratio2.values],[testanalysis.dendrite.cable.rallratio2.values]);
	[p44,h44] = ranksum([controlanalysis.dendrite.cable.daughterratio.values],[testanalysis.dendrite.cable.daughterratio.values]);
	[p45,h45] = ranksum([controlanalysis.dendrite.termination.cable.distalpathlength.values],[testanalysis.dendrite.termination.cable.distalpathlength.values]);
	[p46,h46] = ranksum([controlanalysis.dendrite.bifurcation.cable.partitionasymmetry.values],[testanalysis.dendrite.bifurcation.cable.partitionasymmetry.values]);
	[p47,h47] = ranksum([controlanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values],[testanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values]);
	
	
	if h3 == 0, h3 = 'same'; else h3 = 'diff'; end;
	if h4 == 0, h4 = 'same'; else h4 = 'diff'; end;
	if h5 == 0, h5 = 'same'; else h5 = 'diff'; end;
	if h7 == 0, h7 = 'same'; else h7 = 'diff'; end;
	if h8 == 0, h8 = 'same'; else h8 = 'diff'; end;
	if h9 == 0, h9 = 'same'; else h9 = 'diff'; end;
	if h11 == 0, h11 = 'same'; else h11 = 'diff'; end;
	if h12 == 0, h12 = 'same'; else h12 = 'diff'; end;
	if h13 == 0, h13 = 'same'; else h13 = 'diff'; end;
	if h15 == 0, h15 = 'same'; else h15 = 'diff'; end;
	if h16 == 0, h16 = 'same'; else h16 = 'diff'; end;
	if h17 == 0, h17 = 'same'; else h17 = 'diff'; end;
	if h19 == 0, h19 = 'same'; else h19 = 'diff'; end;
	if h20 == 0, h20 = 'same'; else h20 = 'diff'; end;
	if h21 == 0, h21 = 'same'; else h21 = 'diff'; end;
	if h23 == 0, h23 = 'same'; else h23 = 'diff'; end;
	if h24 == 0, h24 = 'same'; else h24 = 'diff'; end;
	if h25 == 0, h25 = 'same'; else h25 = 'diff'; end;
	if h27 == 0, h27 = 'same'; else h27 = 'diff'; end;
	if h28 == 0, h28 = 'same'; else h28 = 'diff'; end;
	if h29 == 0, h29 = 'same'; else h29 = 'diff'; end;
	if h31 == 0, h31 = 'same'; else h31 = 'diff'; end;
	if h32 == 0, h32 = 'same'; else h32 = 'diff'; end;
	if h33 == 0, h33 = 'same'; else h33 = 'diff'; end;
	if h35 == 0, h35 = 'same'; else h35 = 'diff'; end;
	if h36 == 0, h36 = 'same'; else h36 = 'diff'; end;
	if h37 == 0, h37 = 'same'; else h37 = 'diff'; end;
	if h39 == 0, h39 = 'same'; else h39 = 'diff'; end;
	if h40 == 0, h40 = 'same'; else h40 = 'diff'; end;
	if h41 == 0, h41 = 'same'; else h41 = 'diff'; end;
	if h42 == 0, h42 = 'same'; else h42 = 'diff'; end;
	if h43 == 0, h43 = 'same'; else h43 = 'diff'; end;
	if h44 == 0, h44 = 'same'; else h44 = 'diff'; end;
	if h45 == 0, h45 = 'same'; else h45 = 'diff'; end;
	if h46 == 0, h46 = 'same'; else h46 = 'diff'; end;
	if h47 == 0, h47 = 'same'; else h47 = 'diff'; end;
	
	
	position{1,9} = '"RS-test"';
	position{2,9} = '"h"';
	position{3,9} = h3;
	position{4,9} = h4;
	position{5,9} = h5;
	%position{6,9} = 'Total Dendritic';
	position{7,9} = h7;
	position{8,9} = h8;
	position{9,9} = h9;
	%position{10,9} = 'Segment Numbers';
	position{11,9} = h11;
	position{12,9} = h12;
	position{13,9} = h13;
	%position{14,9} = 'Branch Order';
	position{15,9} = h15;
	position{16,9} = h16;
	position{17,9} = h17;
	%position{18,9} = 'Degree';
	position{19,9} = h19;
	position{20,9} = h20;
	position{21,9} = h21;
	%position{22,9} = 'Taper Rate';
	position{23,9} = h23;
	position{24,9} = h24;
	position{25,9} = h25;
	%position{26,9} = 'Diameter';
	position{27,9} = h27;
	position{28,9} = h28;
	position{29,9} = h29;
	%position{30,9} = 'Branch Length';
	position{31,9} = h31;
	position{32,9} = h32;
	position{33,9} = h33;
	%position{34,9} = 'Branch Surface Area';
	position{35,9} = h35;
	position{36,9} = h36;
	position{37,9} = h37;
	%position{38,9} = 'Branch Volume';
	position{39,9} = h39;
	position{40,9} = h40;
	position{41,9} = h41;
	position{42,9} = h42;
	position{43,9} = h43;
	position{44,9} = h44;
	position{45,9} = h45;
	position{46,9} = h46;
	position{47,9} = h47;
	
	
	position{1,10} = '"(median)"';
	position{2,10} = '"p"';
	position{3,10} = p3;
	position{4,10} = p4;
	position{5,10} = p5;
	%position{6,10} = 'Total Dendritic';
	position{7,10} = p7;
	position{8,10} = p8;
	position{9,10} = p9;
	%position{10,10} = 'Segment Numbers';
	position{11,10} = p11;
	position{12,10} = p12;
	position{13,10} = p13;
	%position{14,10} = 'Branch Order';
	position{15,10} = p15;
	position{16,10} = p16;
	position{17,10} = p17;
	%position{18,10} = 'Degree';
	position{19,10} = p19;
	position{20,10} = p20;
	position{21,10} = p21;
	%position{22,10} = 'Taper Rate';
	position{23,10} = p23;
	position{24,10} = p24;
	position{25,10} = p25;
	%position{26,10} = 'Diameter';
	position{27,10} = p27;
	position{28,10} = p28;
	position{29,10} = p29;
	%position{30,10} = 'Branch Length';
	position{31,10} = p31;
	position{32,10} = p32;
	position{33,10} = p33;
	%position{34,10} = 'Branch Surface Area';
	position{35,10} = p35;
	position{36,10} = p36;
	position{37,10} = p37;
	%position{38,10} = 'Branch Volume';
	position{39,10} = p39;
	position{40,10} = p40;
	position{41,10} = p41;
	position{42,10} = p42;
	position{43,10} = p43;
	position{44,10} = p44;
	position{45,10} = p45;
	position{46,10} = p46;
	position{47,10} = p47;
	
	

	
	
	
	[h3,p3]   = ansaribradley([controlanalysis.soma.diameter.values],[testanalysis.soma.diameter.values]);
	[h4,p4]   = ansaribradley([controlanalysis.dendrite.numbertrunks.values],[testanalysis.dendrite.numbertrunks.values]);
	[h5,p5]   = ansaribradley([controlanalysis.dendrite.trunk.proximaldiameter.values],[testanalysis.dendrite.trunk.proximaldiameter.values]);
	[h7,p7]   = ansaribradley([controlanalysis.dendrite.totallength.values],[testanalysis.dendrite.totallength.values]);
	[h8,p8]   = ansaribradley([controlanalysis.dendrite.totalsurfacearea.values],[testanalysis.dendrite.totalsurfacearea.values]);
	[h9,p9]   = ansaribradley([controlanalysis.dendrite.totalvolume.values],[testanalysis.dendrite.totalvolume.values]);
	[h11,p11] = ansaribradley([controlanalysis.dendrite.numbersegments.values],[testanalysis.dendrite.numbersegments.values]);
	[h12,p12] = ansaribradley([controlanalysis.dendrite.numberbifurcations.values],[testanalysis.dendrite.numberbifurcations.values]);
	[h13,p13] = ansaribradley([controlanalysis.dendrite.numberterminations.values],[testanalysis.dendrite.numberterminations.values]);
	[h15,p15] = ansaribradley([controlanalysis.dendrite.cable.branchorder.values],[testanalysis.dendrite.cable.branchorder.values]);
	[h16,p16] = ansaribradley([controlanalysis.dendrite.bifurcation.cable.branchorder.values],[testanalysis.dendrite.bifurcation.cable.branchorder.values]);
	[h17,p17] = ansaribradley([controlanalysis.dendrite.termination.cable.branchorder.values],[testanalysis.dendrite.termination.cable.branchorder.values]);
	[h19,p19] = ansaribradley([controlanalysis.dendrite.cable.degree.values],[testanalysis.dendrite.cable.degree.values]);
	[h20,p20] = ansaribradley([controlanalysis.dendrite.bifurcation.cable.degree.values],[testanalysis.dendrite.bifurcation.cable.degree.values]);
	[h21,p21] = ansaribradley([controlanalysis.dendrite.termination.cable.degree.values],[testanalysis.dendrite.termination.cable.degree.values]);
	[h23,p23] = ansaribradley([controlanalysis.dendrite.cable.taperrate.values],[testanalysis.dendrite.cable.taperrate.values]);
	[h24,p24] = ansaribradley([controlanalysis.dendrite.bifurcation.cable.taperrate.values],[testanalysis.dendrite.bifurcation.cable.taperrate.values]);
	[h25,p25] = ansaribradley([controlanalysis.dendrite.termination.cable.taperrate.values],[testanalysis.dendrite.termination.cable.taperrate.values]);
	[h27,p27] = ansaribradley([controlanalysis.dendrite.cable.cylindricaldiameter.values],[testanalysis.dendrite.cable.cylindricaldiameter.values]);
	[h28,p28] = ansaribradley([controlanalysis.dendrite.bifurcation.cable.cylindricaldiameter.values],[testanalysis.dendrite.bifurcation.cable.cylindricaldiameter.values]);
	[h29,p29] = ansaribradley([controlanalysis.dendrite.termination.cable.cylindricaldiameter.values],[testanalysis.dendrite.termination.cable.cylindricaldiameter.values]);
	[h31,p31] = ansaribradley([controlanalysis.dendrite.cable.length.values],[testanalysis.dendrite.cable.length.values]);
	[h32,p32] = ansaribradley([controlanalysis.dendrite.bifurcation.cable.length.values],[testanalysis.dendrite.bifurcation.cable.length.values]);
	[h33,p33] = ansaribradley([controlanalysis.dendrite.termination.cable.length.values],[testanalysis.dendrite.termination.cable.length.values]);
	[h35,p35] = ansaribradley([controlanalysis.dendrite.cable.surfacearea.values],[testanalysis.dendrite.cable.surfacearea.values]);
	[h36,p36] = ansaribradley([controlanalysis.dendrite.bifurcation.cable.surfacearea.values],[testanalysis.dendrite.bifurcation.cable.surfacearea.values]);
	[h37,p37] = ansaribradley([controlanalysis.dendrite.termination.cable.surfacearea.values],[testanalysis.dendrite.termination.cable.surfacearea.values]);
	[h39,p39] = ansaribradley([controlanalysis.dendrite.cable.volume.values],[testanalysis.dendrite.cable.volume.values]);
	[h40,p40] = ansaribradley([controlanalysis.dendrite.bifurcation.cable.volume.values],[testanalysis.dendrite.bifurcation.cable.volume.values]);
	[h41,p41] = ansaribradley([controlanalysis.dendrite.termination.cable.volume.values],[testanalysis.dendrite.termination.cable.volume.values]);
	[h42,p42] = ansaribradley([controlanalysis.dendrite.cable.rallratio.values],[testanalysis.dendrite.cable.rallratio.values]);
	[h43,p43] = ansaribradley([controlanalysis.dendrite.cable.rallratio2.values],[testanalysis.dendrite.cable.rallratio2.values]);
	[h44,p44] = ansaribradley([controlanalysis.dendrite.cable.daughterratio.values],[testanalysis.dendrite.cable.daughterratio.values]);
	[h45,p45] = ansaribradley([controlanalysis.dendrite.termination.cable.distalpathlength.values],[testanalysis.dendrite.termination.cable.distalpathlength.values]);
	[h46,p46] = ansaribradley([controlanalysis.dendrite.bifurcation.cable.partitionasymmetry.values],[testanalysis.dendrite.bifurcation.cable.partitionasymmetry.values]);
	[h47,p47] = ansaribradley([controlanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values],[testanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values]);
	
	
	if h3 == 0, h3 = 'same'; else h3 = 'diff'; end;
	if h4 == 0, h4 = 'same'; else h4 = 'diff'; end;
	if h5 == 0, h5 = 'same'; else h5 = 'diff'; end;
	if h7 == 0, h7 = 'same'; else h7 = 'diff'; end;
	if h8 == 0, h8 = 'same'; else h8 = 'diff'; end;
	if h9 == 0, h9 = 'same'; else h9 = 'diff'; end;
	if h11 == 0, h11 = 'same'; else h11 = 'diff'; end;
	if h12 == 0, h12 = 'same'; else h12 = 'diff'; end;
	if h13 == 0, h13 = 'same'; else h13 = 'diff'; end;
	if h15 == 0, h15 = 'same'; else h15 = 'diff'; end;
	if h16 == 0, h16 = 'same'; else h16 = 'diff'; end;
	if h17 == 0, h17 = 'same'; else h17 = 'diff'; end;
	if h19 == 0, h19 = 'same'; else h19 = 'diff'; end;
	if h20 == 0, h20 = 'same'; else h20 = 'diff'; end;
	if h21 == 0, h21 = 'same'; else h21 = 'diff'; end;
	if h23 == 0, h23 = 'same'; else h23 = 'diff'; end;
	if h24 == 0, h24 = 'same'; else h24 = 'diff'; end;
	if h25 == 0, h25 = 'same'; else h25 = 'diff'; end;
	if h27 == 0, h27 = 'same'; else h27 = 'diff'; end;
	if h28 == 0, h28 = 'same'; else h28 = 'diff'; end;
	if h29 == 0, h29 = 'same'; else h29 = 'diff'; end;
	if h31 == 0, h31 = 'same'; else h31 = 'diff'; end;
	if h32 == 0, h32 = 'same'; else h32 = 'diff'; end;
	if h33 == 0, h33 = 'same'; else h33 = 'diff'; end;
	if h35 == 0, h35 = 'same'; else h35 = 'diff'; end;
	if h36 == 0, h36 = 'same'; else h36 = 'diff'; end;
	if h37 == 0, h37 = 'same'; else h37 = 'diff'; end;
	if h39 == 0, h39 = 'same'; else h39 = 'diff'; end;
	if h40 == 0, h40 = 'same'; else h40 = 'diff'; end;
	if h41 == 0, h41 = 'same'; else h41 = 'diff'; end;
	if h42 == 0, h42 = 'same'; else h42 = 'diff'; end;
	if h43 == 0, h43 = 'same'; else h43 = 'diff'; end;
	if h44 == 0, h44 = 'same'; else h44 = 'diff'; end;
	if h45 == 0, h45 = 'same'; else h45 = 'diff'; end;
	if h46 == 0, h46 = 'same'; else h46 = 'diff'; end;
	if h47 == 0, h47 = 'same'; else h47 = 'diff'; end;
	
	
	position{1,11} = '"AB-test"';
	position{2,11} = '"h"';
	position{3,11} = h3;
	position{4,11} = h4;
	position{5,11} = h5;
	%position{6,11} = 'Total Dendritic';
	position{7,11} = h7;
	position{8,11} = h8;
	position{9,11} = h9;
	%position{10,11} = 'Segment Numbers';
	position{11,11} = h11;
	position{12,11} = h12;
	position{13,11} = h13;
	%position{14,11} = 'Branch Order';
	position{15,11} = h15;
	position{16,11} = h16;
	position{17,11} = h17;
	%position{18,11} = 'Degree';
	position{19,11} = h19;
	position{20,11} = h20;
	position{21,11} = h21;
	%position{22,11} = 'Taper Rate';
	position{23,11} = h23;
	position{24,11} = h24;
	position{25,11} = h25;
	%position{26,11} = 'Diameter';
	position{27,11} = h27;
	position{28,11} = h28;
	position{29,11} = h29;
	%position{30,11} = 'Branch Length';
	position{31,11} = h31;
	position{32,11} = h32;
	position{33,11} = h33;
	%position{34,11} = 'Branch Surface Area';
	position{35,11} = h35;
	position{36,11} = h36;
	position{37,11} = h37;
	%position{38,11} = 'Branch Volume';
	position{39,11} = h39;
	position{40,11} = h40;
	position{41,11} = h41;
	position{42,11} = h42;
	position{43,11} = h43;
	position{44,11} = h44;
	position{45,11} = h45;
	position{46,11} = h46;
	position{47,11} = h47;
	
	
	position{1,12} = '"(variability)"';
	position{2,12} = '"p"';
	position{3,12} = p3;
	position{4,12} = p4;
	position{5,12} = p5;
	%position{6,12} = 'Total Dendritic';
	position{7,12} = p7;
	position{8,12} = p8;
	position{9,12} = p9;
	%position{10,12} = 'Segment Numbers';
	position{11,12} = p11;
	position{12,12} = p12;
	position{13,12} = p13;
	%position{14,12} = 'Branch Order';
	position{15,12} = p15;
	position{16,12} = p16;
	position{17,12} = p17;
	%position{18,12} = 'Degree';
	position{19,12} = p19;
	position{20,12} = p20;
	position{21,12} = p21;
	%position{22,12} = 'Taper Rate';
	position{23,12} = p23;
	position{24,12} = p24;
	position{25,12} = p25;
	%position{26,12} = 'Diameter';
	position{27,12} = p27;
	position{28,12} = p28;
	position{29,12} = p29;
	%position{30,12} = 'Branch Length';
	position{31,12} = p31;
	position{32,12} = p32;
	position{33,12} = p33;
	%position{34,12} = 'Branch Surface Area';
	position{35,12} = p35;
	position{36,12} = p36;
	position{37,12} = p37;
	%position{38,12} = 'Branch Volume';
	position{39,12} = p39;
	position{40,12} = p40;
	position{41,12} = p41;
	position{42,12} = p42;
	position{43,12} = p43;
	position{44,12} = p44;
	position{45,12} = p45;
	position{46,12} = p46;
	position{47,12} = p47;
	
	
	
	
	
	[h3,p3]   = kstest2([controlanalysis.soma.diameter.values],[testanalysis.soma.diameter.values]);
	[h4,p4]   = kstest2([controlanalysis.dendrite.numbertrunks.values],[testanalysis.dendrite.numbertrunks.values]);
	[h5,p5]   = kstest2([controlanalysis.dendrite.trunk.proximaldiameter.values],[testanalysis.dendrite.trunk.proximaldiameter.values]);
	[h7,p7]   = kstest2([controlanalysis.dendrite.totallength.values],[testanalysis.dendrite.totallength.values]);
	[h8,p8]   = kstest2([controlanalysis.dendrite.totalsurfacearea.values],[testanalysis.dendrite.totalsurfacearea.values]);
	[h9,p9]   = kstest2([controlanalysis.dendrite.totalvolume.values],[testanalysis.dendrite.totalvolume.values]);
	[h11,p11] = kstest2([controlanalysis.dendrite.numbersegments.values],[testanalysis.dendrite.numbersegments.values]);
	[h12,p12] = kstest2([controlanalysis.dendrite.numberbifurcations.values],[testanalysis.dendrite.numberbifurcations.values]);
	[h13,p13] = kstest2([controlanalysis.dendrite.numberterminations.values],[testanalysis.dendrite.numberterminations.values]);
	[h15,p15] = kstest2([controlanalysis.dendrite.cable.branchorder.values],[testanalysis.dendrite.cable.branchorder.values]);
	[h16,p16] = kstest2([controlanalysis.dendrite.bifurcation.cable.branchorder.values],[testanalysis.dendrite.bifurcation.cable.branchorder.values]);
	[h17,p17] = kstest2([controlanalysis.dendrite.termination.cable.branchorder.values],[testanalysis.dendrite.termination.cable.branchorder.values]);
	[h19,p19] = kstest2([controlanalysis.dendrite.cable.degree.values],[testanalysis.dendrite.cable.degree.values]);
	[h20,p20] = kstest2([controlanalysis.dendrite.bifurcation.cable.degree.values],[testanalysis.dendrite.bifurcation.cable.degree.values]);
	[h21,p21] = kstest2([controlanalysis.dendrite.termination.cable.degree.values],[testanalysis.dendrite.termination.cable.degree.values]);
	[h23,p23] = kstest2([controlanalysis.dendrite.cable.taperrate.values],[testanalysis.dendrite.cable.taperrate.values]);
	[h24,p24] = kstest2([controlanalysis.dendrite.bifurcation.cable.taperrate.values],[testanalysis.dendrite.bifurcation.cable.taperrate.values]);
	[h25,p25] = kstest2([controlanalysis.dendrite.termination.cable.taperrate.values],[testanalysis.dendrite.termination.cable.taperrate.values]);
	[h27,p27] = kstest2([controlanalysis.dendrite.cable.cylindricaldiameter.values],[testanalysis.dendrite.cable.cylindricaldiameter.values]);
	[h28,p28] = kstest2([controlanalysis.dendrite.bifurcation.cable.cylindricaldiameter.values],[testanalysis.dendrite.bifurcation.cable.cylindricaldiameter.values]);
	[h29,p29] = kstest2([controlanalysis.dendrite.termination.cable.cylindricaldiameter.values],[testanalysis.dendrite.termination.cable.cylindricaldiameter.values]);
	[h31,p31] = kstest2([controlanalysis.dendrite.cable.length.values],[testanalysis.dendrite.cable.length.values]);
	[h32,p32] = kstest2([controlanalysis.dendrite.bifurcation.cable.length.values],[testanalysis.dendrite.bifurcation.cable.length.values]);
	[h33,p33] = kstest2([controlanalysis.dendrite.termination.cable.length.values],[testanalysis.dendrite.termination.cable.length.values]);
	[h35,p35] = kstest2([controlanalysis.dendrite.cable.surfacearea.values],[testanalysis.dendrite.cable.surfacearea.values]);
	[h36,p36] = kstest2([controlanalysis.dendrite.bifurcation.cable.surfacearea.values],[testanalysis.dendrite.bifurcation.cable.surfacearea.values]);
	[h37,p37] = kstest2([controlanalysis.dendrite.termination.cable.surfacearea.values],[testanalysis.dendrite.termination.cable.surfacearea.values]);
	[h39,p39] = kstest2([controlanalysis.dendrite.cable.volume.values],[testanalysis.dendrite.cable.volume.values]);
	[h40,p40] = kstest2([controlanalysis.dendrite.bifurcation.cable.volume.values],[testanalysis.dendrite.bifurcation.cable.volume.values]);
	[h41,p41] = kstest2([controlanalysis.dendrite.termination.cable.volume.values],[testanalysis.dendrite.termination.cable.volume.values]);
	[h42,p42] = kstest2([controlanalysis.dendrite.cable.rallratio.values],[testanalysis.dendrite.cable.rallratio.values]);
	[h43,p43] = kstest2([controlanalysis.dendrite.cable.rallratio2.values],[testanalysis.dendrite.cable.rallratio2.values]);
	[h44,p44] = kstest2([controlanalysis.dendrite.cable.daughterratio.values],[testanalysis.dendrite.cable.daughterratio.values]);
	[h45,p45] = kstest2([controlanalysis.dendrite.termination.cable.distalpathlength.values],[testanalysis.dendrite.termination.cable.distalpathlength.values]);
	[h46,p46] = kstest2([controlanalysis.dendrite.bifurcation.cable.partitionasymmetry.values],[testanalysis.dendrite.bifurcation.cable.partitionasymmetry.values]);
	[h47,p47] = kstest2([controlanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values],[testanalysis.dendrite.bifurcation.cable.surfaceasymmetry.values]);
	
	
	if h3 == 0, h3 = 'same'; else h3 = 'diff'; end;
	if h4 == 0, h4 = 'same'; else h4 = 'diff'; end;
	if h5 == 0, h5 = 'same'; else h5 = 'diff'; end;
	if h7 == 0, h7 = 'same'; else h7 = 'diff'; end;
	if h8 == 0, h8 = 'same'; else h8 = 'diff'; end;
	if h9 == 0, h9 = 'same'; else h9 = 'diff'; end;
	if h11 == 0, h11 = 'same'; else h11 = 'diff'; end;
	if h12 == 0, h12 = 'same'; else h12 = 'diff'; end;
	if h13 == 0, h13 = 'same'; else h13 = 'diff'; end;
	if h15 == 0, h15 = 'same'; else h15 = 'diff'; end;
	if h16 == 0, h16 = 'same'; else h16 = 'diff'; end;
	if h17 == 0, h17 = 'same'; else h17 = 'diff'; end;
	if h19 == 0, h19 = 'same'; else h19 = 'diff'; end;
	if h20 == 0, h20 = 'same'; else h20 = 'diff'; end;
	if h21 == 0, h21 = 'same'; else h21 = 'diff'; end;
	if h23 == 0, h23 = 'same'; else h23 = 'diff'; end;
	if h24 == 0, h24 = 'same'; else h24 = 'diff'; end;
	if h25 == 0, h25 = 'same'; else h25 = 'diff'; end;
	if h27 == 0, h27 = 'same'; else h27 = 'diff'; end;
	if h28 == 0, h28 = 'same'; else h28 = 'diff'; end;
	if h29 == 0, h29 = 'same'; else h29 = 'diff'; end;
	if h31 == 0, h31 = 'same'; else h31 = 'diff'; end;
	if h32 == 0, h32 = 'same'; else h32 = 'diff'; end;
	if h33 == 0, h33 = 'same'; else h33 = 'diff'; end;
	if h35 == 0, h35 = 'same'; else h35 = 'diff'; end;
	if h36 == 0, h36 = 'same'; else h36 = 'diff'; end;
	if h37 == 0, h37 = 'same'; else h37 = 'diff'; end;
	if h39 == 0, h39 = 'same'; else h39 = 'diff'; end;
	if h40 == 0, h40 = 'same'; else h40 = 'diff'; end;
	if h41 == 0, h41 = 'same'; else h41 = 'diff'; end;
	if h42 == 0, h42 = 'same'; else h42 = 'diff'; end;
	if h43 == 0, h43 = 'same'; else h43 = 'diff'; end;
	if h44 == 0, h44 = 'same'; else h44 = 'diff'; end;
	if h45 == 0, h45 = 'same'; else h45 = 'diff'; end;
	if h46 == 0, h46 = 'same'; else h46 = 'diff'; end;
	if h47 == 0, h47 = 'same'; else h47 = 'diff'; end;
	
	
	position{1,13} = '"KS-test"';
	position{2,13} = '"h"';
	position{3,13} = h3;
	position{4,13} = h4;
	position{5,13} = h5;
	%position{6,13} = 'Total Dendritic';
	position{7,13} = h7;
	position{8,13} = h8;
	position{9,13} = h9;
	%position{10,13} = 'Segment Numbers';
	position{11,13} = h11;
	position{12,13} = h12;
	position{13,13} = h13;
	%position{14,13} = 'Branch Order';
	position{15,13} = h15;
	position{16,13} = h16;
	position{17,13} = h17;
	%position{18,13} = 'Degree';
	position{19,13} = h19;
	position{20,13} = h20;
	position{21,13} = h21;
	%position{22,13} = 'Taper Rate';
	position{23,13} = h23;
	position{24,13} = h24;
	position{25,13} = h25;
	%position{26,13} = 'Diameter';
	position{27,13} = h27;
	position{28,13} = h28;
	position{29,13} = h29;
	%position{30,13} = 'Branch Length';
	position{31,13} = h31;
	position{32,13} = h32;
	position{33,13} = h33;
	%position{34,13} = 'Branch Surface Area';
	position{35,13} = h35;
	position{36,13} = h36;
	position{37,13} = h37;
	%position{38,13} = 'Branch Volume';
	position{39,13} = h39;
	position{40,13} = h40;
	position{41,13} = h41;
	position{42,13} = h42;
	position{43,13} = h43;
	position{44,13} = h44;
	position{45,13} = h45;
	position{46,13} = h46;
	position{47,13} = h47;
	
	
	position{1,14} = '"(mean & var)"';
	position{2,14} = '"p"';
	position{3,14} = p3;
	position{4,14} = p4;
	position{5,14} = p5;
	%position{6,14} = 'Total Dendritic';
	position{7,14} = p7;
	position{8,14} = p8;
	position{9,14} = p9;
	%position{10,14} = 'Segment Numbers';
	position{11,14} = p11;
	position{12,14} = p12;
	position{13,14} = p13;
	%position{14,14} = 'Branch Order';
	position{15,14} = p15;
	position{16,14} = p16;
	position{17,14} = p17;
	%position{18,14} = 'Degree';
	position{19,14} = p19;
	position{20,14} = p20;
	position{21,14} = p21;
	%position{22,14} = 'Taper Rate';
	position{23,14} = p23;
	position{24,14} = p24;
	position{25,14} = p25;
	%position{26,14} = 'Diameter';
	position{27,14} = p27;
	position{28,14} = p28;
	position{29,14} = p29;
	%position{30,14} = 'Branch Length';
	position{31,14} = p31;
	position{32,14} = p32;
	position{33,14} = p33;
	%position{34,14} = 'Branch Surface Area';
	position{35,14} = p35;
	position{36,14} = p36;
	position{37,14} = p37;
	%position{38,14} = 'Branch Volume';
	position{39,14} = p39;
	position{40,14} = p40;
	position{41,14} = p41;
	position{42,14} = p42;
	position{43,14} = p43;
	position{44,14} = p44;
	position{45,14} = p45;
	position{46,14} = p46;
	position{47,14} = p47;
	
	

    currentdirectory = cd;
    cd(controlanalysis.datapathname);
    cd ..

    if exist(sprintf('%s_%s_comparison',controlanalysis.inputfilename,testanalysis.inputfilename),'dir')==7;
        cd(sprintf('%s_%s_comparison',controlanalysis.inputfilename,testanalysis.inputfilename));
    else
        mkdir(sprintf('%s_%s_comparison',controlanalysis.inputfilename,testanalysis.inputfilename));
        cd(sprintf('%s_%s_comparison',controlanalysis.inputfilename,testanalysis.inputfilename));
    end

    if exist('comparisontables','dir')==7
        cd('comparisontables');
    else
        mkdir('comparisontables');
        cd('comparisontables');
    end
    	
    filename = sprintf('%s_%s_%s',controlanalysis.inputfilename,testanalysis.inputfilename,'summary_comparison_table.csv');
	cell2csv(filename,position);
	cd(currentdirectory);

end



warning('on', 'MATLAB:divideByZero');